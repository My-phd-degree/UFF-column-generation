julia> main(args)
Application parameters:
  batch  =>  nothing
  instance  =>  "GVRP/data/EMH/AS1-4c3sU10.txt"
  noround  =>  false
  cfg  =>  "/GVRP/src/../config/BWTSP.cfg"
  out  =>  nothing
  ub  =>  1.0e7
  sol  =>  nothing
  preprocessings  =>  nothing
  tikz  =>  nothing
  instance_type  =>  "EMH"
  nosolve  =>  false
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
Set([7, 9, 3, 5, 8, 6]) <> 3
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 1
Set([7, 4, 9, 2, 3, 5, 8, 6]) <> 2
Set([7, 4, 9, 3, 5, 8, 6]) <> 4
[0.3825441838743461, 0.41368317013520617, 0.19590484152127072, 0.19590484152127072, 0.19590484152127072]
...
DijkstraPath ...
Shortest path from 4 to 9: no possible path (cosT: Inf)
Set([7, 4, 9, 2, 3, 5, 8, 6, 1]) <> 4
Set([7, 9, 2, 3, 5, 8, 6, 1]) <> 8
Set([7, 9, 2, 3, 5, 6, 1]) <> 7
Set([9, 2, 3, 5, 6, 1]) <> 5
Set([9, 2, 3, 6, 1]) <> 6
Set([9, 2, 3, 1]) <> 9
Shortest path* from 4 to 9: no possible path (cosT: Inf <> costF: Inf)

Matrix Costs (time_cost):

	1	2	3	4	5	6	7	8	

1	***	0.04781802298429326	0.059839299393516864	0.0544217488071566	0.05171039626690077	0.04993403070914569	0.028611918541969306	0.04472139048792989	
2	0.04781802298429326	***	0.08162955425644783	0.08444900490716488	0.0698244639243494	0.024488105190158836	0.061841337100980144	0.07925933166403648	
3	0.059839299393516864	0.08162955425644783	***	0.08573864795427276	0.02478599378324551	0.07487889040903514	0.047219166978587024	0.04872192305830078	
4	0.0544217488071566	0.08444900490716488	0.08573864795427276	***	0.08360755613250352	0.09010600809765662	0.05423101785784059	0.05065958605021102	
5	0.05171039626690077	0.0698244639243494	0.02478599378324551	0.08360755613250352	***	0.06267539191524375	0.04234477349406313	0.04983781793299723	
6	0.04993403070914569	0.024488105190158836	0.07487889040903514	0.09010600809765662	0.06267539191524375	***	0.06116743493409027	0.07874185582163604	
7	0.028611918541969306	0.061841337100980144	0.047219166978587024	0.05423101785784059	0.04234477349406313	0.06116743493409027	***	0.0301090434096676	
8	0.04472139048792989	0.07925933166403648	0.04872192305830078	0.05065958605021102	0.04983781793299723	0.07874185582163604	0.0301090434096676	***	

----------------------------------------
Tuple{Int64,Int64}[]
----------------------------------------
min_d: 0.9795242076063535 - max_d: 3.604240323906265
min_f: 0.19590484152127072 - max_f: 0.720848064781253	data.β: 60.0
min_t: 0.024488105190158836 - max_t: 0.09010600809765662	data.T: 10.75
----------------------------------------
AFs:
2
3
4
----------------------------------------
OKAY 3
MAPEANDO EM K ROTAS - EM TESTE
VRPSolver warning: unmapped x vars were ignored because there are mapped x vars
 solve 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VRPSolver v0.4.1, 28/09/2020. Web: vrpsolver.math.u-bordeaux.fr
Corresponds to the solver by Pessoa, Sadykov, Uchoa and Vanderbeck (2020)
Paper: dx.doi.org/10.1007/s10107-020-01523-z
USE THIS CODE ONLY FOR ACADEMIC PURPOSES AT YOUR OWN RISK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BaPCod v051, 28/09/2020, © Inria Bordeaux, France (license expires 1/12/2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VRPSolver parameters:
GlobalTimeLimit = 21474836
MaxNbOfBBtreeNodeTreated = 100000
treeSearchStrategy = 1
RCSPstopCutGenTimeThresholdInPricing = 10
RCSPhardTimeThresholdInPricing = 25
RCSPnumberOfBucketsPerVertex = 25
RCSPdynamicBucketSteps = 1
RCSPuseBidirectionalSearch = 1
RCSPapplyReducedCostFixing = 1
RCSPredCostFixingFalseGap = 0
RCSPmaxNumOfColsPerIteration = 30
RCSPmaxNumOfColsPerExactIteration = 150
RCSPheurLabelingStrategy = 0
StabilizationMinPhaseOfStage = 0
RCSPmaxNumOfLabelsInEnumeration = 0
RCSPmaxNumOfEnumeratedSolutions = 0
RCSPmaxNumOfEnumSolutionsForMIP = 0
RCSPinitNGneighbourhoodSize = 8
RCSPmaxNGneighbourhoodSize = 8
RCSPrankOneCutsMaxNumPerRound = 100
RCSPrankOneCutsMaxNumRows = 5
RCSPrankOneCutsMemoryType = 1
CutTailingOffThreshold = 0.015
CutTailingOffCounterThreshold = 3
SafeDualBoundScaleFactor = -1
StrongBranchingPhaseOneCandidatesNumber = 100
StrongBranchingPhaseOneTreeSizeEstimRatio = 0.2
StrongBranchingPhaseTwoCandidatesNumber = 5
StrongBranchingPhaseTwoTreeSizeEstimRatio = 0.02
MaxTimeForRestrictedMasterIpHeur = -1
DivingHeurUseDepthLimit = -1
MaxLDSbreadth = 0
MaxLDSdepth = 0
New model incumbent solution 1e+07, TIME = 0h0m0s0t = 0
Model is built TIME = 0h0m0s1t = 1
************************************************************************************************
**** BaB tree root node
**** Local DB = -1e+12, global bounds : [ -1e+12 , 1e+07 ], TIME = 0h0m0s1t = 1
**** 1 open nodes, 0 columns (0 active), 0 dyn. constrs. (0 active), 162 art. vars. (162 active)
************************************************************************************************
<DWph=2> <it= 10> <et=0.06> <Mt= 0.00> <Spt= 0.03> <nCl=300> <DB=-1070091955.5117> <Mlp=27315811.4772> <PB=10000000> 
<DWph=2> <it= 20> <et=0.13> <Mt= 0.03> <Spt= 0.04> <nCl=300> <DB=-480852577.2560> <Mlp=6358452.1070> <PB=10000000> 
<DWph=2> <it= 30> <et=0.24> <Mt= 0.04> <Spt= 0.05> <nCl=300> <DB= -139.7636> <Mlp=   11.1967> <PB=10000000> 
<DWph=2> <it= 40> <et=0.36> <Mt= 0.06> <Spt= 0.04> <nCl=300> <DB=  -40.0351> <Mlp=    8.9495> <PB=10000000> 
<DWph=2> <it= 50> <et=0.49> <Mt= 0.06> <Spt= 0.05> <nCl=300> <DB=  -30.3229> <Mlp=    8.1774> <PB=10000000> 
<DWph=2> <it= 60> <et=0.64> <Mt= 0.07> <Spt= 0.05> <nCl=298> <DB=   -6.9199> <Mlp=    7.7819> <PB=10000000> 
<DWph=2> <it= 70> <et=0.80> <Mt= 0.09> <Spt= 0.04> <nCl=258> <DB=    2.4991> <Mlp=    7.6386> <PB=10000000> 
<DWph=2> <it= 80> <et=0.97> <Mt= 0.08> <Spt= 0.05> <nCl=292> <DB=    6.0775> <Mlp=    7.5645> <PB=10000000> 
<DWph=2> <it= 88> <et=1.11> <Mt= 0.06> <Spt= 0.04> <nCl=155> <DB=    7.5460> <Mlp=    7.5460> <PB=10000000> 
<DWph=1> <it= 90> <et=1.14> <Mt= 0.01> <Spt= 0.01> <nCl= 60> <DB=    2.8528> <Mlp=    7.5303> <PB=10000000> 
<DWph=1> <it=100> <et=1.33> <Mt= 0.09> <Spt= 0.05> <nCl=300> <DB=    5.6306> <Mlp=    7.4278> <PB=10000000> 
<DWph=1> <it=109> <et=1.49> <Mt= 0.07> <Spt= 0.05> <nCl=188> <DB=    7.4120> <Mlp=    7.4120> <PB=10000000> 
<DWph=0> <it=110> <et=1.52> <Mt= 0.01> <Spt= 0.03> <nCl=  0> <DB=    7.4120> <Mlp=    7.4120> <PB=10000000> 
Reduced cost fixing for graph G_1... took 0.01 sec., 6364 buck. arcs remain (100% from prev., 35.6% from max.)
ColGenEvalAlg final dual bound: 7.41196 (rounded: 7.41196)
Route 4 S: [2, 6]
min_cut
min_cut
Route 4 S: [3, 5]
min_cut
min_cut
SparseMaxFlowMinCut ...
maxflow_callback
maxflow_callback
maxflow_callback
maxflow_callback
----- Add fac. cuts : UserCuts0(8), max.viol = 2, aver.viol = 0.881716, sep/add took 0.83/0.01 sec. -----
3540 columns (3540 active), 8 dyn. constrs. (8 active), 177 art. vars. (177 active)
<DWph=2> <it= 10> <et=2.69> <Mt= 0.20> <Spt= 0.04> <nCl=300> <DB=-146119409.9376> <Mlp=17887022.6458> <PB=10000000> 
<DWph=2> <it= 20> <et=2.94> <Mt= 0.13> <Spt= 0.05> <nCl=300> <DB=-2881725.6315> <Mlp=14652191.8743> <PB=10000000> 
<DWph=2> <it= 30> <et=3.20> <Mt= 0.15> <Spt= 0.04> <nCl=293> <DB=    7.8423> <Mlp=   16.9569> <PB=10000000> 
<DWph=2> <it= 40> <et=3.46> <Mt= 0.14> <Spt= 0.04> <nCl=262> <DB=   -0.6170> <Mlp=   15.3201> <PB=10000000> 
<DWph=2> <it= 50> <et=3.72> <Mt= 0.13> <Spt= 0.05> <nCl=271> <DB=   10.7310> <Mlp=   14.7887> <PB=10000000> 
<DWph=2> <it= 57> <et=3.92> <Mt= 0.10> <Spt= 0.04> <nCl=137> <DB=   14.7297> <Mlp=   14.7297> <PB=10000000> 
<DWph=1> <it= 58> <et=3.95> <Mt= 0.01> <Spt= 0.01> <nCl=  0> <DB=   14.7297> <Mlp=   14.7297> <PB=10000000> 
<DWph=0> <it= 59> <et=3.98> <Mt= 0.02> <Spt= 0.02> <nCl=  0> <DB=   14.7297> <Mlp=   14.7297> <PB=10000000> 
ColGenEvalAlg final dual bound: 14.7297 (rounded: 14.7297)
Route 2 S: [2, 6]
min_cut
min_cut
Route 2 S: [3, 5]
min_cut
min_cut
>>>>> TOTAL cuts : 4 cut(s) added
SparseMaxFlowMinCut ...
maxflow_callback
maxflow_callback
maxflow_callback
----- Add fac. cuts : UserCuts0(7), max.viol = 1.92308, aver.viol = 0.718371, sep/add took 0/0.02 sec. -----
5525 columns (5525 active), 15 dyn. constrs. (11 active), 191 art. vars. (183 active)
<DWph=2> <it= 10> <et=4.40> <Mt= 0.25> <Spt= 0.04> <nCl=300> <DB=   14.7678> <Mlp=   21.9143> <PB=10000000> 
<DWph=2> <it= 20> <et=4.72> <Mt= 0.18> <Spt= 0.05> <nCl=282> <DB=   19.9233> <Mlp=   21.6219> <PB=10000000> 
<DWph=2> <it= 30> <et=5.09> <Mt= 0.18> <Spt= 0.06> <nCl=278> <DB=   21.3832> <Mlp=   21.5217> <PB=10000000> 
<DWph=2> <it= 37> <et=5.33> <Mt= 0.12> <Spt= 0.04> <nCl=134> <DB=   21.5196> <Mlp=   21.5196> <PB=10000000> 
<DWph=1> <it= 38> <et=5.36> <Mt= 0.01> <Spt= 0.01> <nCl=  0> <DB=   21.5196> <Mlp=   21.5196> <PB=10000000> 
<DWph=0> <it= 39> <et=5.40> <Mt= 0.01> <Spt= 0.03> <nCl=  0> <DB=   21.5196> <Mlp=   21.5196> <PB=10000000> 
ColGenEvalAlg final dual bound: 21.5196 (rounded: 21.5196)
>>>>> TOTAL cuts : 7 cut(s) added
SparseMaxFlowMinCut ...
----- Add fac. cuts : R1C(4), max.viol = 0.343637, aver.viol = 0.339366, sep/add took 0.01/0.03 sec. -----
6996 columns (6996 active), 15 dyn. constrs. (9 active), 195 art. vars. (175 active)
<DWph=2> <it= 10> <et=6.14> <Mt= 0.52> <Spt= 0.05> <nCl=300> <DB=   14.4409> <Mlp=   22.0971> <PB=10000000> 
<DWph=2> <it= 20> <et=6.52> <Mt= 0.22> <Spt= 0.05> <nCl=300> <DB=   21.3152> <Mlp=   21.5948> <PB=10000000> 
<DWph=2> <it= 30> <et=6.89> <Mt= 0.21> <Spt= 0.05> <nCl=277> <DB=   21.4929> <Mlp=   21.5535> <PB=10000000> 
<DWph=2> <it= 40> <et=7.27> <Mt= 0.20> <Spt= 0.05> <nCl=251> <DB=   21.5079> <Mlp=   21.5365> <PB=10000000> 
<DWph=2> <it= 50> <et=7.64> <Mt= 0.19> <Spt= 0.05> <nCl=265> <DB=   21.5169> <Mlp=   21.5273> <PB=10000000> 
<DWph=2> <it= 60> <et=8.01> <Mt= 0.20> <Spt= 0.04> <nCl=227> <DB=   21.5191> <Mlp=   21.5199> <PB=10000000> 
<DWph=2> <it= 62> <et=8.24> <Mt= 0.04> <Spt= 0.05> <nCl= 46> <DB=   20.9346> <Mlp=   21.5196> <PB=10000000> 
<DWph=1> <it= 63> <et=8.34> <Mt= 0.03> <Spt= 0.02> <nCl=  0> <DB=   21.5196> <Mlp=   21.5196> <PB=10000000> 
<DWph=0> <it= 64> <et=8.37> <Mt= 0.02> <Spt= 0.00> <nCl=  0> <DB=   21.5196> <Mlp=   21.5196> <PB=10000000> 
ColGenEvalAlg final dual bound: 21.5196 (rounded: 21.5196)
>>>>> TOTAL cuts : 7 cut(s) added
SparseMaxFlowMinCut ...
----- Add fac. cuts : sep. took 0.02 sec.----- no cuts found  -----
**** Strong branching phase 1 is started *****
SB phase 1 cand.  1 branch on var x_1_4_7_2_1_OspV (lhs=0.2445): [   21.5456,    23.4780], score = 0.05      <et=8.61>
SB phase 1 cand.  2 branch on var x_1_7_5_4_1_OspV (lhs=0.2301): [   21.5418, 4358982.8934], score = 96373.33      <et=8.83>
SB phase 1 cand.  3 branch on var x_1_5_7_4_1_OspV (lhs=0.2289): [   21.5498, 3898109.1986], score = 117666.12      <et=8.99>
SB phase 1 cand.  4 branch on var x_1_6_3_2_1_OspV (lhs=0.2288): [   21.5383, 1171194.5080], score = 21904.89      <et=9.22>
SB phase 1 cand.  5 branch on var x_1_5_6_4_1_OspV (lhs=0.2167): [   21.5654, 4489487.1504], score = 205238.59      <et=9.44>
**** Strong branching phase 2 is started *****
>>>>> TOTAL cuts : 7 cut(s) added
SparseMaxFlowMinCut ...
<DWph=1> <it= 42> <et=31.76> <Mt= 0.88> <Spt= 0.20> <nCl=1040> <DB=   21.5191> <Mlp=   21.5196> <PB=21.519645> 
<DWph=1> <it=  1> <et=31.83> <Mt= 0.01> <Spt= 0.00> <nCl=  0> <DB=   21.5196> <Mlp=   21.5654> <PB=21.519645> 
 SB phase 2 candidate 1 is conquered !
**** Strong branching phase 3 is started *****
**** SB phase 3 evaluation of candidate 1, branch 1 ( x_1_5_6_4_1_OspV <= 0 ), value = 21.5654
**** SB phase 3 evaluation of candidate 1, branch 2 ( x_1_5_6_4_1_OspV >= 1 ), value = 21.5196
 SB phase 3 candidate 1 is conquered !
New model incumbent solution 21.5196, TIME = 0h0m31s87t = 3187
************************************************************************************************
Search is finished, global bounds : [ 21.5196 , 21.5196 ], TIME = 0h0m31s87t = 3187
************************************************************************************************
BaPCod : solution defined.
statistics_cols: instance & :Optimal & cutoff & :bcRecRootDb & :bcTimeRootEval & :bcCountNodeProc & :bcRecBestDb & :bcRecBestInc & :bcTimeMain \\
statistics: AS1-4c3sU10 & 1 & 1.0e7 & 21.52 & 8.41 & 3 & 21.52 & 21.52 & 31.87 \\

Matrix Costs (time):

	1	2	3	4	5	6	7	8	

1	***	0.04781802298429326	0.059839299393516864	0.0544217488071566	0.05171039626690077	0.04993403070914569	0.028611918541969306	0.04472139048792989	
2	0.04781802298429326	***	0.08162955425644783	0.08444900490716488	0.0698244639243494	0.024488105190158836	0.061841337100980144	0.07925933166403648	
3	0.059839299393516864	0.08162955425644783	***	0.08573864795427276	0.02478599378324551	0.07487889040903514	0.047219166978587024	0.04872192305830078	
4	0.0544217488071566	0.08444900490716488	0.08573864795427276	***	0.08360755613250352	0.09010600809765662	0.05423101785784059	0.05065958605021102	
5	0.05171039626690077	0.0698244639243494	0.02478599378324551	0.08360755613250352	***	0.06267539191524375	0.04234477349406313	0.04983781793299723	
6	0.04993403070914569	0.024488105190158836	0.07487889040903514	0.09010600809765662	0.06267539191524375	***	0.06116743493409027	0.07874185582163604	
7	0.028611918541969306	0.061841337100980144	0.047219166978587024	0.05423101785784059	0.04234477349406313	0.06116743493409027	***	0.0301090434096676	
8	0.04472139048792989	0.07925933166403648	0.04872192305830078	0.05065958605021102	0.04983781793299723	0.07874185582163604	0.0301090434096676	***	

[0.3825441838743461, 0.41368317013520617, 0.19590484152127072, 0.19590484152127072, 0.19590484152127072]
Route 1 S: 1
Route 2 S: 2( 1 - 2 ) ( 2 - 1 ) 
Route 3 S: 3
Route 4 S: 4( 1 - 4 ) ( 3 - 8 ) ( 4 - 1 ) ( 4 - 7 ) ( 5 - 6 ) 56( 6 - 3 ) ( 7 - 5 ) 75( 8 - 4 ) 
########################################################

